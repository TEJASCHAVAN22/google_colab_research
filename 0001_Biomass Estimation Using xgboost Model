# -----------------------------------
# üì¶ 1. Install and Import Packages
# -----------------------------------
!pip install -q geemap xgboost

import ee
import geemap
import xarray as xr
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor

# -----------------------------------
# üåç 2. Authenticate & Initialize EE
# -----------------------------------
ee.Authenticate()
ee.Initialize(
    project='ee-amirhosseinahrari',
    opt_url='https://earthengine-highvolume.googleapis.com'
)

# -----------------------------------
# üó∫Ô∏è 3. Draw ROI and Set Map
# -----------------------------------
Map = geemap.Map(basemap='SATELLITE')
Map

# Draw ROI manually
roi = Map.draw_last_feature.geometry()

# -----------------------------------
# üì• 4. Collect and Stack EE Data (2010‚Äì2011)
# -----------------------------------
biomass = ee.ImageCollection("NASA/ORNL/biomass_carbon_density/v1").select('agb').first().rename('biomass')

ndvi = ee.ImageCollection("MODIS/061/MOD13A2").select('NDVI', 'EVI') \
    .filterDate('2010', '2011').mean().rename('ndvi', 'evi')

lai = ee.ImageCollection("MODIS/061/MOD15A2H").select('Lai_500m', 'Fpar_500m') \
    .filterDate('2010', '2011').mean().rename('lai', 'fpar')

temp = ee.ImageCollection("MODIS/061/MYD11A2").select('LST_Day_1km') \
    .filterDate('2010', '2011').mean().rename('temp')

pr = ee.ImageCollection("NASA/GPM_L3/IMERG_MONTHLY_V07").select('precipitation') \
    .filterDate('2010', '2011').sum().rename('pr')

lc = ee.ImageCollection("MODIS/061/MCD12Q1").select('LC_Type1') \
    .filterDate('2010', '2011').first().rename('lc')

# Stack all images
stack = ee.Image.cat([ndvi, lai, temp, pr, lc, biomass])

# -----------------------------------
# üìä 5. Convert to xarray Dataset
# -----------------------------------
ds = xr.open_dataset(
    stack,
    engine='ee',
    crs='EPSG:4326',
    scale=0.1,
    geometry=roi
)

df = ds.to_dataframe().dropna()

# -----------------------------------
# ü§ñ 6. Train ML Model (XGBoost)
# -----------------------------------
x = df[['ndvi', 'lai', 'temp', 'pr', 'lc', 'fpar', 'evi']]
y = df['biomass']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model = XGBRegressor(n_estimators=100, random_state=42)
model.fit(x_train, y_train)

# Predict and evaluate
y_pred = model.predict(x_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f'RMSE: {rmse:.2f}')
print(f'R2 Score: {r2:.2f}')

# -----------------------------------
# üßæ 7. Predict Biomass for 2010‚Äì2011 Data
# -----------------------------------
df['predicted_biomass'] = model.predict(x)
xarr = df.to_xarray().sortby('lon').sortby('lat')

# Plot actual vs predicted biomass
fig, ax = plt.subplots(1, 2, figsize=(12, 6))
plt.tight_layout()

xarr.biomass.plot(ax=ax[0], x='lon', y='lat', robust=True)
ax[0].set_title("Observed Biomass")

xarr.predicted_biomass.plot(ax=ax[1], x='lon', y='lat', robust=True)
ax[1].set_title("Predicted Biomass (2010‚Äì2011)")

# -----------------------------------
# üîÅ 8. Predict Biomass for 2015‚Äì2016
# -----------------------------------
time_start = ee.Date('2015-01-01')
time_end = ee.Date('2016-01-01')

# Recollect variables for new time range
ndvi_15 = ee.ImageCollection("MODIS/061/MOD13A2").select('NDVI', 'EVI') \
    .filterDate(time_start, time_end).mean().rename('ndvi', 'evi')

lai_15 = ee.ImageCollection("MODIS/061/MOD15A2H").select('Lai_500m', 'Fpar_500m') \
    .filterDate(time_start, time_end).mean().rename('lai', 'fpar')

temp_15 = ee.ImageCollection("MODIS/061/MYD11A2").select('LST_Day_1km') \
    .filterDate(time_start, time_end).mean().rename('temp')

pr_15 = ee.ImageCollection("NASA/GPM_L3/IMERG_MONTHLY_V07").select('precipitation') \
    .filterDate(time_start, time_end).sum().rename('pr')

lc_15 = ee.ImageCollection("MODIS/061/MCD12Q1").select('LC_Type1') \
    .filterDate(time_start, time_end).first().rename('lc')

# Stack new time image
stack2015 = ee.Image.cat([ndvi_15, lai_15, temp_15, pr_15, lc_15])

ds2015 = xr.open_dataset(
    stack2015,
    engine='ee',
    crs='EPSG:4326',
    scale=0.1,
    geometry=roi
)

df2015 = ds2015.to_dataframe().dropna()

# Predict biomass
df2015['biomass2015'] = model.predict(df2015[['ndvi', 'lai', 'temp', 'pr', 'lc', 'fpar', 'evi']])

xarr2015 = df2015.to_xarray().sortby('lon').sortby('lat')

# Plot biomass prediction for 2015‚Äì2016
xarr2015.biomass2015.plot(x='lon', y='lat', robust=True, cmap='YlGn')
plt.title("Predicted Biomass (2015‚Äì2016)")
plt.show()
